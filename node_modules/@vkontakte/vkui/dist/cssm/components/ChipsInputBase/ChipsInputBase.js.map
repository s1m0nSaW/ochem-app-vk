{"version":3,"sources":["../../../../src/components/ChipsInputBase/ChipsInputBase.tsx"],"sourcesContent":["import * as React from 'react';\nimport { classNames } from '@vkontakte/vkjs';\nimport { isHTMLElement } from '@vkontakte/vkui-floating-ui/utils/dom';\nimport { useAdaptivity } from '../../hooks/useAdaptivity';\nimport { useExternRef } from '../../hooks/useExternRef';\nimport { getHorizontalFocusGoTo, Keys } from '../../lib/accessibility';\nimport { contains as checkTargetIsInputEl } from '../../lib/dom';\nimport { FormField } from '../FormField/FormField';\nimport { Text } from '../Typography/Text/Text';\nimport { DEFAULT_INPUT_VALUE, DEFAULT_VALUE, renderChipDefault } from './constants';\nimport {\n  getChipOptionIndexByHTMLElement,\n  getChipOptionIndexByValueProp,\n  getChipOptionValueByHTMLElement,\n  getNextChipOptionIndexByNavigateToProp,\n  isInputValueEmpty,\n} from './helpers';\nimport type { ChipOption, ChipOptionValue, ChipsInputBasePrivateProps, NavigateTo } from './types';\nimport styles from './ChipsInputBase.module.css';\n\nconst sizeYClassNames = {\n  none: styles['ChipsInputBase--sizeY-none'],\n  compact: styles['ChipsInputBase--sizeY-compact'],\n} as const;\n\nexport const ChipsInputBase = <O extends ChipOption>({\n  // FormFieldProps\n  getRootRef,\n  style,\n  className,\n  before,\n  after,\n  status,\n  mode,\n\n  // option\n  value = DEFAULT_VALUE,\n  onAddChipOption,\n  onRemoveChipOption: onRemoveChipOptionProp,\n  renderChip = renderChipDefault,\n\n  // input\n  getRef,\n  id: idProp,\n  inputValue = DEFAULT_INPUT_VALUE,\n  placeholder,\n  disabled,\n  readOnly,\n  addOnBlur,\n  onBlur,\n  onInputChange,\n  ...restProps\n}: ChipsInputBasePrivateProps<O>) => {\n  const { sizeY = 'none' } = useAdaptivity();\n  const idGenerated = React.useId();\n  const inputRef = useExternRef(getRef);\n  const listboxRef = React.useRef<HTMLDivElement>(null);\n\n  const valueLength = value.length;\n  const withPlaceholder = valueLength === 0;\n  const isDisabled = disabled || readOnly;\n  const [chipFocusedIndex, setChipFocusedIndex] = React.useState(0);\n\n  const resetChipOptionFocusToInputEl = (inputEl: HTMLInputElement) => {\n    setChipFocusedIndex(0);\n    inputEl.focus();\n  };\n\n  const moveFocusToChipOption = (\n    currentIndex: number,\n    navigateTo: NavigateTo,\n    listboxEl: HTMLElement,\n  ) => {\n    const index = getNextChipOptionIndexByNavigateToProp(currentIndex, navigateTo, valueLength);\n    // eslint-disable-next-line no-restricted-properties\n    const foundEl = listboxEl.querySelector<HTMLElement>(`[data-index=\"${index}\"]`);\n\n    if (foundEl) {\n      setChipFocusedIndex(index);\n      foundEl.focus();\n    } else {\n      setChipFocusedIndex(0);\n    }\n  };\n\n  const removeChipOption = (o: O | ChipOptionValue, index: number) => {\n    if (!inputRef.current || !listboxRef.current) {\n      return;\n    }\n\n    if (valueLength > 1) {\n      if (index === valueLength - 1) {\n        moveFocusToChipOption(index, 'prev', listboxRef.current);\n      } else {\n        moveFocusToChipOption(index, 'next', listboxRef.current);\n      }\n    } else {\n      resetChipOptionFocusToInputEl(inputRef.current);\n    }\n\n    onRemoveChipOptionProp(o);\n  };\n\n  const handleListboxKeyDown = (event: React.KeyboardEvent<HTMLDivElement>) => {\n    const targetEl = event.target;\n    if (\n      event.defaultPrevented ||\n      !inputRef.current ||\n      !listboxRef.current ||\n      !isHTMLElement(targetEl)\n    ) {\n      return;\n    }\n\n    switch (event.key) {\n      case Keys.ENTER: {\n        if (\n          checkTargetIsInputEl(targetEl, inputRef.current) &&\n          !isInputValueEmpty(inputRef.current.value)\n        ) {\n          event.preventDefault();\n          onAddChipOption(inputRef.current.value);\n        }\n        break;\n      }\n      case Keys.DELETE:\n      case Keys.BACKSPACE: {\n        if (valueLength > 0) {\n          if (!checkTargetIsInputEl(targetEl, inputRef.current)) {\n            event.preventDefault();\n            removeChipOption(\n              getChipOptionValueByHTMLElement(targetEl),\n              getChipOptionIndexByHTMLElement(targetEl),\n            );\n          } else if (event.key === Keys.BACKSPACE && isInputValueEmpty(inputRef.current.value)) {\n            event.preventDefault();\n            moveFocusToChipOption(\n              getChipOptionIndexByHTMLElement(targetEl),\n              'last',\n              listboxRef.current,\n            );\n          }\n        }\n        break;\n      }\n      case Keys.ARROW_UP:\n      case Keys.ARROW_LEFT:\n      case Keys.ARROW_DOWN:\n      case Keys.ARROW_RIGHT: {\n        if (valueLength !== 0 && !checkTargetIsInputEl(targetEl, inputRef.current)) {\n          event.preventDefault();\n          moveFocusToChipOption(\n            getChipOptionIndexByHTMLElement(targetEl),\n            getHorizontalFocusGoTo(event.key),\n            listboxRef.current,\n          );\n        }\n        break;\n      }\n    }\n  };\n\n  const handleInputBlur = (event: React.FocusEvent<HTMLInputElement>) => {\n    if (onBlur) {\n      onBlur(event);\n    }\n\n    if (addOnBlur && !event.defaultPrevented && inputRef.current) {\n      onAddChipOption(inputRef.current.value);\n    }\n  };\n\n  const handleChipRemove = (event: React.MouseEvent, v: ChipOptionValue) => {\n    event.preventDefault();\n    event.stopPropagation();\n    removeChipOption(v, getChipOptionIndexByValueProp(v, value));\n  };\n\n  return (\n    <FormField\n      Component=\"div\"\n      getRootRef={getRootRef}\n      style={style}\n      disabled={disabled}\n      before={before}\n      after={after}\n      status={status}\n      mode={mode}\n      className={className}\n    >\n      <div\n        className={classNames(\n          styles['ChipsInputBase'],\n          sizeY !== 'regular' && sizeYClassNames[sizeY],\n          withPlaceholder && styles['ChipsInputBase--hasPlaceholder'],\n        )}\n        // для a11y\n        ref={listboxRef}\n        role=\"listbox\"\n        aria-orientation=\"horizontal\"\n        aria-disabled={disabled}\n        aria-readonly={readOnly}\n        onKeyDown={isDisabled ? undefined : handleListboxKeyDown}\n      >\n        {value.map((option, index) => (\n          <React.Fragment key={`${typeof option.value}-${option.label}`}>\n            {renderChip(\n              {\n                'Component': 'div',\n                'value': option.value,\n                'label': option.label,\n                'disabled': disabled,\n                'className': styles['ChipsInputBase__chip'],\n                'onRemove': handleChipRemove,\n                // чтобы можно было легче найти этот чип в DOM\n                'data-index': index,\n                'data-value': option.value,\n                // для a11y\n                'tabIndex': chipFocusedIndex === index ? 0 : -1,\n                'role': 'option',\n                'aria-selected': true,\n                'aria-posinset': index + 1,\n                'aria-setsize': valueLength,\n              },\n              option,\n            )}\n          </React.Fragment>\n        ))}\n        <Text\n          autoCapitalize=\"none\"\n          autoComplete=\"off\"\n          autoCorrect=\"off\"\n          spellCheck={false}\n          {...restProps}\n          Component=\"input\"\n          type=\"text\"\n          id={idProp || `chips-input-base-generated-id-${idGenerated}`}\n          getRootRef={inputRef}\n          className={styles['ChipsInputBase__el']}\n          disabled={disabled}\n          readOnly={readOnly}\n          placeholder={withPlaceholder ? placeholder : undefined}\n          value={inputValue}\n          onChange={onInputChange}\n          onBlur={handleInputBlur}\n        />\n      </div>\n    </FormField>\n  );\n};\n"],"names":["React","classNames","isHTMLElement","useAdaptivity","useExternRef","getHorizontalFocusGoTo","Keys","contains","checkTargetIsInputEl","FormField","Text","DEFAULT_INPUT_VALUE","DEFAULT_VALUE","renderChipDefault","getChipOptionIndexByHTMLElement","getChipOptionIndexByValueProp","getChipOptionValueByHTMLElement","getNextChipOptionIndexByNavigateToProp","isInputValueEmpty","styles","sizeYClassNames","none","compact","ChipsInputBase","getRootRef","style","className","before","after","status","mode","value","onAddChipOption","onRemoveChipOption","onRemoveChipOptionProp","renderChip","getRef","id","idProp","inputValue","placeholder","disabled","readOnly","addOnBlur","onBlur","onInputChange","restProps","sizeY","idGenerated","useId","inputRef","listboxRef","useRef","valueLength","length","withPlaceholder","isDisabled","chipFocusedIndex","setChipFocusedIndex","useState","resetChipOptionFocusToInputEl","inputEl","focus","moveFocusToChipOption","currentIndex","navigateTo","listboxEl","index","foundEl","querySelector","removeChipOption","o","current","handleListboxKeyDown","event","targetEl","target","defaultPrevented","key","ENTER","preventDefault","DELETE","BACKSPACE","ARROW_UP","ARROW_LEFT","ARROW_DOWN","ARROW_RIGHT","handleInputBlur","handleChipRemove","v","stopPropagation","Component","div","ref","role","aria-orientation","aria-disabled","aria-readonly","onKeyDown","undefined","map","option","Fragment","label","autoCapitalize","autoComplete","autoCorrect","spellCheck","type","onChange"],"mappings":"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"}