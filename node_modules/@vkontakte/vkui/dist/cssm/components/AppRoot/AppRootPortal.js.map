{"version":3,"sources":["../../../../src/components/AppRoot/AppRootPortal.tsx"],"sourcesContent":["import * as React from 'react';\nimport { useAppearance } from '../../hooks/useAppearance';\nimport { useIsClient } from '../../hooks/useIsClient';\nimport { createPortal } from '../../lib/createPortal';\nimport { isRefObject } from '../../lib/isRefObject';\nimport { HasChildren } from '../../types';\nimport { AppearanceProvider } from '../AppearanceProvider/AppearanceProvider';\nimport { AppRootContext, type AppRootContextInterface } from './AppRootContext';\n\nexport interface AppRootPortalProps extends HasChildren {\n  /**\n   * - При передаче `true` будет использовать `portalRoot` из контекста `AppRoot`.\n   * - При передаче элемента будут игнорироваться `portalRoot` и `disablePortal` из контекста `AppRoot`.\n   */\n  usePortal?: boolean | HTMLElement | React.RefObject<HTMLElement> | null;\n}\n\nexport const AppRootPortal = ({ children, usePortal }: AppRootPortalProps) => {\n  const { portalRoot, mode, disablePortal } = React.useContext(AppRootContext);\n  const appearance = useAppearance();\n\n  const isClient = useIsClient();\n  if (!isClient) {\n    return null;\n  }\n\n  const portalContainer = resolvePortalContainer(usePortal, portalRoot.current);\n  if (!portalContainer || shouldDisablePortal(usePortal, mode, Boolean(disablePortal))) {\n    return children;\n  }\n\n  return createPortal(\n    <AppearanceProvider value={appearance}>{children}</AppearanceProvider>,\n    portalContainer,\n  );\n};\n\nfunction shouldDisablePortal(\n  usePortal: AppRootPortalProps['usePortal'],\n  mode: AppRootContextInterface['mode'],\n  disablePortal: boolean,\n) {\n  if (usePortal !== undefined) {\n    if (typeof usePortal !== 'boolean') {\n      return false;\n    }\n    return disablePortal || usePortal !== true;\n  }\n  // fallback\n  return disablePortal || mode !== 'full';\n}\n\nfunction resolvePortalContainer<PortalRootFromContext extends HTMLElement | null | undefined>(\n  usePortal: AppRootPortalProps['usePortal'],\n  portalRootFromContext: PortalRootFromContext,\n) {\n  if (usePortal === true || !usePortal) {\n    return portalRootFromContext ? portalRootFromContext : null;\n  }\n\n  return isRefObject(usePortal) ? usePortal.current : usePortal;\n}\n"],"names":["React","useAppearance","useIsClient","createPortal","isRefObject","AppearanceProvider","AppRootContext","AppRootPortal","children","usePortal","portalRoot","mode","disablePortal","useContext","appearance","isClient","portalContainer","resolvePortalContainer","current","shouldDisablePortal","Boolean","value","undefined","portalRootFromContext"],"mappings":"AAAA,YAAYA,WAAW,QAAQ;AAC/B,SAASC,aAAa,QAAQ,4BAA4B;AAC1D,SAASC,WAAW,QAAQ,0BAA0B;AACtD,SAASC,YAAY,QAAQ,yBAAyB;AACtD,SAASC,WAAW,QAAQ,wBAAwB;AAEpD,SAASC,kBAAkB,QAAQ,2CAA2C;AAC9E,SAASC,cAAc,QAAsC,mBAAmB;AAUhF,OAAO,MAAMC,gBAAgB,CAAC,EAAEC,QAAQ,EAAEC,SAAS,EAAsB;IACvE,MAAM,EAAEC,UAAU,EAAEC,IAAI,EAAEC,aAAa,EAAE,GAAGZ,MAAMa,UAAU,CAACP;IAC7D,MAAMQ,aAAab;IAEnB,MAAMc,WAAWb;IACjB,IAAI,CAACa,UAAU;QACb,OAAO;IACT;IAEA,MAAMC,kBAAkBC,uBAAuBR,WAAWC,WAAWQ,OAAO;IAC5E,IAAI,CAACF,mBAAmBG,oBAAoBV,WAAWE,MAAMS,QAAQR,iBAAiB;QACpF,OAAOJ;IACT;IAEA,OAAOL,2BACL,oBAACE;QAAmBgB,OAAOP;OAAaN,WACxCQ;AAEJ,EAAE;AAEF,SAASG,oBACPV,SAA0C,EAC1CE,IAAqC,EACrCC,aAAsB;IAEtB,IAAIH,cAAca,WAAW;QAC3B,IAAI,OAAOb,cAAc,WAAW;YAClC,OAAO;QACT;QACA,OAAOG,iBAAiBH,cAAc;IACxC;IACA,WAAW;IACX,OAAOG,iBAAiBD,SAAS;AACnC;AAEA,SAASM,uBACPR,SAA0C,EAC1Cc,qBAA4C;IAE5C,IAAId,cAAc,QAAQ,CAACA,WAAW;QACpC,OAAOc,wBAAwBA,wBAAwB;IACzD;IAEA,OAAOnB,YAAYK,aAAaA,UAAUS,OAAO,GAAGT;AACtD"}