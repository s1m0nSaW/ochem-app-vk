{"version":3,"sources":["../../../src/components/ChipsSelect/ChipsSelect.tsx"],"sourcesContent":["import * as React from 'react';\nimport { classNames } from '@vkontakte/vkjs';\nimport { useExternRef } from '../../hooks/useExternRef';\nimport { useGlobalOnClickOutside } from '../../hooks/useGlobalOnClickOutside';\nimport { Keys } from '../../lib/accessibility';\nimport type { Placement } from '../../lib/floating';\nimport { defaultFilterFn } from '../../lib/select';\nimport { ChipsInputBase } from '../ChipsInputBase/ChipsInputBase';\nimport {\n  getNewOptionDataDefault,\n  getOptionLabelDefault,\n  getOptionValueDefault,\n  renderChipDefault,\n} from '../ChipsInputBase/constants';\nimport type { ChipOption, ChipsInputBaseProps } from '../ChipsInputBase/types';\nimport { CustomSelectDropdown } from '../CustomSelectDropdown/CustomSelectDropdown';\nimport {\n  CustomSelectOption,\n  type CustomSelectOptionProps,\n} from '../CustomSelectOption/CustomSelectOption';\nimport { DropdownIcon } from '../DropdownIcon/DropdownIcon';\nimport type { FormFieldProps } from '../FormField/FormField';\nimport { Footnote } from '../Typography/Footnote/Footnote';\nimport {\n  DEFAULT_EMPTY_TEXT,\n  DEFAULT_SELECTED_BEHAVIOR,\n  FOCUS_ACTION_NEXT,\n  FOCUS_ACTION_PREV,\n  isCreateNewOptionPreset,\n  isEmptyOptionPreset,\n  isNotServicePreset,\n  renderOptionDefault,\n} from './constants';\nimport type { FocusActionType } from './types';\nimport { useChipsSelect, type UseChipsSelectProps } from './useChipsSelect';\nimport styles from './ChipsSelect.module.css';\n\nconst stylesDropdownVerticalPlacement = {\n  top: styles['ChipsSelect--pop-up'],\n  bottom: styles['ChipsSelect--pop-down'],\n} as const;\n\nexport interface ChipsSelectProps<O extends ChipOption>\n  extends ChipsInputBaseProps<O>,\n    UseChipsSelectProps<O>,\n    Pick<FormFieldProps, 'status' | 'mode' | 'before'> {\n  placement?: 'top' | 'bottom';\n  /**\n   * Отрисовка Spinner вместо списка опций в выпадающем списке\n   */\n  fetching?: boolean;\n  /**\n   * Закрытие выпадающего списка после выбора элемента\n   */\n  closeAfterSelect?: boolean;\n  /**\n   * Ширина раскрывающегося списка зависит от контента\n   */\n  dropdownAutoWidth?: boolean;\n  /**\n   * Принудительно использовать портал.\n   */\n  forceDropdownPortal?: boolean;\n  /**\n   * Передача `data-testid`.\n   */\n  dropdownTestId?: string;\n  /**\n   * Иконка раскрывающегося списка\n   */\n  icon?: React.ReactNode;\n  /**\n   * Добавляет значение в список на событие `onBlur` (использовать вместе с `creatable`)\n   */\n  addOnBlur?: boolean;\n  /**\n   * Отключает максимальную высоту по умолчанию\n   */\n  noMaxHeight?: boolean;\n\n  renderOption?(props: CustomSelectOptionProps, option: O): React.ReactNode;\n  /**\n   * Событие срабатывающее перед onChange\n   */\n  onChangeStart?(event: React.MouseEvent | React.KeyboardEvent, option: O): void;\n}\n\n/**\n * @see https://vkcom.github.io/VKUI/#/ChipsSelect\n */\nexport const ChipsSelect = <Option extends ChipOption>({\n  // FormFieldProps\n  id: labelledbyId,\n  getRootRef,\n  className,\n  status = 'default',\n  icon: dropdownIconProp,\n  onChangeStart,\n\n  // CustomSelectDropdownProps\n  options: optionsProp,\n  placement: placementProp = 'bottom',\n  closeAfterSelect = true,\n  selectedBehavior = DEFAULT_SELECTED_BEHAVIOR,\n  emptyText = DEFAULT_EMPTY_TEXT,\n  creatable = false,\n  fetching = false,\n  dropdownAutoWidth,\n  forceDropdownPortal,\n  noMaxHeight = false,\n  filterFn = defaultFilterFn,\n  dropdownTestId,\n\n  // ChipsInputProps\n  getRef,\n  value: valueProp,\n  defaultValue,\n  inputValue: inputValueProp,\n  defaultInputValue,\n  disabled,\n  getOptionValue = getOptionValueDefault,\n  getOptionLabel = getOptionLabelDefault,\n  getNewOptionData = getNewOptionDataDefault,\n  renderChip = renderChipDefault,\n  renderOption = renderOptionDefault,\n  onChange,\n  onFocus,\n  onInputChange: onInputChangeProp,\n  onBlur,\n  onKeyDown,\n  ...restProps\n}: ChipsSelectProps<Option>) => {\n  const {\n    // Связано с ChipsInputProps\n    // option\n    value,\n    addOptionFromInput,\n    addOption,\n    removeOption,\n    // input\n    inputRef: inputRefHook,\n    inputValue,\n    clearInput,\n    onInputChange,\n\n    // Связано с CustomSelectDropdownProps\n    options,\n    opened,\n    setOpened,\n    focusedOption,\n    focusedOptionIndex,\n    setFocusedOption,\n    setFocusedOptionIndex,\n  } = useChipsSelect({\n    // option\n    value: valueProp,\n    defaultValue,\n    onChange,\n    getOptionValue,\n    getOptionLabel,\n    getNewOptionData,\n\n    // input\n    inputValue: inputValueProp,\n    defaultInputValue,\n    onInputChange: onInputChangeProp,\n\n    // dropdown\n    options: optionsProp,\n    emptyText,\n    creatable,\n    filterFn,\n    selectedBehavior,\n\n    // other\n    disabled,\n  });\n\n  // Связано с ChipsInputProps\n  const rootRef = useExternRef(getRootRef);\n  const inputRef = useExternRef(getRef, inputRefHook);\n\n  // Связано с CustomSelectDropdownProps\n  const [dropdownVerticalPlacement, setDropdownVerticalPlacement] = React.useState<\n    Extract<Placement, 'top' | 'bottom'> | undefined\n  >(placementProp);\n  const dropdownId = React.useId();\n  const dropdownCurrentItemId =\n    focusedOptionIndex !== null ? `${dropdownId}-${focusedOptionIndex}` : undefined;\n  const dropdownScrollBoxRef = React.useRef<HTMLDivElement>(null);\n\n  const handleFocus = (event: React.FocusEvent<HTMLInputElement>) => {\n    if (onFocus) {\n      onFocus(event);\n    }\n\n    setOpened(true);\n    setFocusedOptionIndex(null);\n  };\n\n  const handleBlur = (event: React.FocusEvent<HTMLInputElement>) => {\n    if (onBlur) {\n      onBlur(event);\n    }\n\n    // Не добавляем значение, если его нужно выбрать строго из списка\n    if (!event.defaultPrevented && !creatable) {\n      event.preventDefault();\n    }\n  };\n\n  const chipsSelectOptions = React.useRef<HTMLElement[]>([]).current;\n\n  const scrollToElement = (index: number, center = false) => {\n    const dropdown = dropdownScrollBoxRef.current;\n    const item = chipsSelectOptions[index];\n\n    if (!item || !dropdown) {\n      return;\n    }\n\n    const dropdownHeight = dropdown.offsetHeight;\n    const scrollTop = dropdown.scrollTop;\n    const itemTop = item.offsetTop;\n    const itemHeight = item.offsetHeight;\n\n    if (center) {\n      dropdown.scrollTop = itemTop - dropdownHeight / 2 + itemHeight / 2;\n    } else if (itemTop + itemHeight > dropdownHeight + scrollTop) {\n      dropdown.scrollTop = itemTop - dropdownHeight + itemHeight;\n    } else if (itemTop < scrollTop) {\n      dropdown.scrollTop = itemTop;\n    }\n  };\n\n  const focusOptionByIndex = (index: number, oldIndex: number | null) => {\n    const length = options.length;\n\n    if (index < 0) {\n      index = length - 1;\n    } else if (index >= length) {\n      index = 0;\n    }\n\n    if (index === oldIndex) {\n      return;\n    }\n\n    scrollToElement(index);\n    setFocusedOptionIndex(index);\n  };\n\n  const focusOption = (nextIndex: number | null, type: FocusActionType) => {\n    let index = nextIndex === null ? -1 : nextIndex;\n\n    if (type === FOCUS_ACTION_NEXT) {\n      index = index + 1;\n    } else if (type === FOCUS_ACTION_PREV) {\n      index = index - 1;\n    }\n\n    focusOptionByIndex(index, focusedOptionIndex);\n  };\n\n  const handleKeyDown = (event: React.KeyboardEvent<HTMLInputElement>) => {\n    if (onKeyDown) {\n      onKeyDown(event);\n    }\n\n    if (event.defaultPrevented) {\n      return;\n    }\n\n    switch (event.key) {\n      case Keys.ARROW_UP:\n      case Keys.ARROW_DOWN:\n        event.preventDefault();\n\n        if (!opened) {\n          setOpened(true);\n          setFocusedOptionIndex(0);\n        } else {\n          focusOption(\n            focusedOptionIndex,\n            event.key === Keys.ARROW_UP ? FOCUS_ACTION_PREV : FOCUS_ACTION_NEXT,\n          );\n        }\n        break;\n      case Keys.ENTER: {\n        if (!opened) {\n          break;\n        }\n        if (focusedOptionIndex != null) {\n          const foundOption = options[focusedOptionIndex];\n          if (foundOption && isNotServicePreset(foundOption)) {\n            event.preventDefault();\n\n            if (onChangeStart) {\n              onChangeStart(event, foundOption);\n            }\n\n            addOption(foundOption);\n            setFocusedOptionIndex(null);\n            clearInput();\n            if (closeAfterSelect) {\n              setOpened(false);\n            }\n\n            break;\n          }\n        }\n\n        if (!creatable) {\n          event.preventDefault();\n        }\n        break;\n      }\n      case Keys.ESCAPE:\n      case Keys.TAB:\n        if (opened) {\n          setOpened(false);\n        }\n    }\n  };\n\n  React.useEffect(() => {\n    if (focusedOptionIndex === null) {\n      setFocusedOption(null);\n    } else {\n      const foundFocusedOptionIndex = options[focusedOptionIndex];\n\n      if (foundFocusedOptionIndex && isNotServicePreset(foundFocusedOptionIndex)) {\n        setFocusedOption(foundFocusedOptionIndex);\n      }\n    }\n  }, [options, focusedOptionIndex, setFocusedOption]);\n\n  const onDropdownPlacementChange = React.useCallback((placement: Placement) => {\n    // console.log(placement);\n    if (placement.startsWith('top')) {\n      setDropdownVerticalPlacement('top');\n    } else if (placement.startsWith('bottom')) {\n      setDropdownVerticalPlacement('bottom');\n    }\n  }, []);\n\n  const onDropdownMouseLeave = React.useCallback(() => {\n    setFocusedOptionIndex(null);\n  }, [setFocusedOptionIndex]);\n\n  const handleClickOutside = React.useCallback(() => {\n    setOpened(false);\n  }, [setOpened]);\n\n  useGlobalOnClickOutside(\n    handleClickOutside,\n    opened ? rootRef : null,\n    opened ? dropdownScrollBoxRef : null,\n  );\n\n  return (\n    <>\n      <ChipsInputBase\n        {...restProps}\n        disabled={disabled}\n        // FormFieldProps\n        id={labelledbyId}\n        getRootRef={rootRef}\n        className={classNames(\n          styles['ChipsSelect'],\n          opened &&\n            dropdownVerticalPlacement &&\n            stylesDropdownVerticalPlacement[dropdownVerticalPlacement],\n          className,\n        )}\n        status={status}\n        after={dropdownIconProp || <DropdownIcon opened={opened} />}\n        // option\n        value={value}\n        onAddChipOption={addOptionFromInput}\n        onRemoveChipOption={removeOption}\n        renderChip={renderChip}\n        // input\n        getRef={inputRef}\n        inputValue={inputValue}\n        onInputChange={onInputChange}\n        onFocus={handleFocus}\n        onBlur={handleBlur}\n        onKeyDown={handleKeyDown}\n        // a11y\n        role=\"combobox\"\n        aria-expanded={opened}\n        aria-autocomplete=\"list\"\n        aria-controls={opened ? dropdownId : undefined}\n        aria-activedescendant={opened ? dropdownCurrentItemId : undefined}\n        aria-haspopup=\"listbox\"\n      />\n      {opened && (\n        <CustomSelectDropdown\n          data-testid={dropdownTestId}\n          targetRef={rootRef}\n          placement={placementProp}\n          scrollBoxRef={dropdownScrollBoxRef}\n          onPlacementChange={onDropdownPlacementChange}\n          onMouseLeave={onDropdownMouseLeave}\n          fetching={fetching}\n          autoWidth={dropdownAutoWidth}\n          forcePortal={forceDropdownPortal}\n          noMaxHeight={noMaxHeight}\n          // a11y\n          id={dropdownId}\n          role=\"listbox\"\n          aria-labelledby={labelledbyId}\n        >\n          {options.map((option, index) => {\n            const dropdownItemId = `${dropdownId}-${index}`;\n\n            if (isEmptyOptionPreset(option)) {\n              return (\n                <Footnote key=\"empty-text\" className={styles['ChipsSelect__empty']}>\n                  {option.placeholder}\n                </Footnote>\n              );\n            }\n            if (isCreateNewOptionPreset(option)) {\n              return (\n                <CustomSelectOption\n                  key=\"create-new-option\"\n                  id={dropdownItemId}\n                  hovered={focusedOptionIndex === index}\n                  onMouseDown={() => addOptionFromInput(inputValue)}\n                  onMouseEnter={() => setFocusedOptionIndex(index)}\n                >\n                  {option.actionText}\n                </CustomSelectOption>\n              );\n            }\n            return (\n              <React.Fragment key={`${typeof option.value}-${option.label}`}>\n                {renderOption(\n                  {\n                    id: dropdownItemId,\n                    hovered: focusedOption\n                      ? getOptionValue(option) === getOptionValue(focusedOption)\n                      : false,\n                    children: option.label,\n                    selected: !!value.find(\n                      (selectedOption: Option) =>\n                        getOptionValue(selectedOption) === getOptionValue(option),\n                    ),\n                    getRootRef(node) {\n                      if (node) {\n                        chipsSelectOptions[index] = node;\n                      }\n                    },\n                    onMouseDown(event: React.MouseEvent<HTMLDivElement>) {\n                      if (onChangeStart) {\n                        onChangeStart(event, option);\n                      }\n\n                      if (!event.defaultPrevented) {\n                        closeAfterSelect && setOpened(false);\n                        addOption(option);\n                        clearInput();\n                      }\n                    },\n                    onMouseEnter() {\n                      setFocusedOptionIndex(index);\n                    },\n                  },\n                  option,\n                )}\n              </React.Fragment>\n            );\n          })}\n        </CustomSelectDropdown>\n      )}\n    </>\n  );\n};\n"],"names":["React","classNames","useExternRef","useGlobalOnClickOutside","Keys","defaultFilterFn","ChipsInputBase","getNewOptionDataDefault","getOptionLabelDefault","getOptionValueDefault","renderChipDefault","CustomSelectDropdown","CustomSelectOption","DropdownIcon","Footnote","DEFAULT_EMPTY_TEXT","DEFAULT_SELECTED_BEHAVIOR","FOCUS_ACTION_NEXT","FOCUS_ACTION_PREV","isCreateNewOptionPreset","isEmptyOptionPreset","isNotServicePreset","renderOptionDefault","useChipsSelect","stylesDropdownVerticalPlacement","top","bottom","ChipsSelect","id","labelledbyId","getRootRef","className","status","icon","dropdownIconProp","onChangeStart","options","optionsProp","placement","placementProp","closeAfterSelect","selectedBehavior","emptyText","creatable","fetching","dropdownAutoWidth","forceDropdownPortal","noMaxHeight","filterFn","dropdownTestId","getRef","value","valueProp","defaultValue","inputValue","inputValueProp","defaultInputValue","disabled","getOptionValue","getOptionLabel","getNewOptionData","renderChip","renderOption","onChange","onFocus","onInputChange","onInputChangeProp","onBlur","onKeyDown","restProps","addOptionFromInput","addOption","removeOption","inputRef","inputRefHook","clearInput","opened","setOpened","focusedOption","focusedOptionIndex","setFocusedOption","setFocusedOptionIndex","rootRef","dropdownVerticalPlacement","setDropdownVerticalPlacement","useState","dropdownId","useId","dropdownCurrentItemId","undefined","dropdownScrollBoxRef","useRef","handleFocus","event","handleBlur","defaultPrevented","preventDefault","chipsSelectOptions","current","scrollToElement","index","center","dropdown","item","dropdownHeight","offsetHeight","scrollTop","itemTop","offsetTop","itemHeight","focusOptionByIndex","oldIndex","length","focusOption","nextIndex","type","handleKeyDown","key","ARROW_UP","ARROW_DOWN","ENTER","foundOption","ESCAPE","TAB","useEffect","foundFocusedOptionIndex","onDropdownPlacementChange","useCallback","startsWith","onDropdownMouseLeave","handleClickOutside","after","onAddChipOption","onRemoveChipOption","role","aria-expanded","aria-autocomplete","aria-controls","aria-activedescendant","aria-haspopup","data-testid","targetRef","scrollBoxRef","onPlacementChange","onMouseLeave","autoWidth","forcePortal","aria-labelledby","map","option","dropdownItemId","placeholder","hovered","onMouseDown","onMouseEnter","actionText","Fragment","label","children","selected","find","selectedOption","node"],"mappings":"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"}