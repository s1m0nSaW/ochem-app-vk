{"version":3,"sources":["../../../../src/components/ChipsSelect/ChipsSelect.tsx"],"sourcesContent":["import * as React from 'react';\nimport { classNames } from '@vkontakte/vkjs';\nimport { useExternRef } from '../../hooks/useExternRef';\nimport { useGlobalOnClickOutside } from '../../hooks/useGlobalOnClickOutside';\nimport { Keys } from '../../lib/accessibility';\nimport type { Placement } from '../../lib/floating';\nimport { defaultFilterFn } from '../../lib/select';\nimport { ChipsInputBase } from '../ChipsInputBase/ChipsInputBase';\nimport {\n  getNewOptionDataDefault,\n  getOptionLabelDefault,\n  getOptionValueDefault,\n  renderChipDefault,\n} from '../ChipsInputBase/constants';\nimport type { ChipOption, ChipsInputBaseProps } from '../ChipsInputBase/types';\nimport { CustomSelectDropdown } from '../CustomSelectDropdown/CustomSelectDropdown';\nimport {\n  CustomSelectOption,\n  type CustomSelectOptionProps,\n} from '../CustomSelectOption/CustomSelectOption';\nimport { DropdownIcon } from '../DropdownIcon/DropdownIcon';\nimport type { FormFieldProps } from '../FormField/FormField';\nimport { Footnote } from '../Typography/Footnote/Footnote';\nimport {\n  DEFAULT_EMPTY_TEXT,\n  DEFAULT_SELECTED_BEHAVIOR,\n  FOCUS_ACTION_NEXT,\n  FOCUS_ACTION_PREV,\n  isCreateNewOptionPreset,\n  isEmptyOptionPreset,\n  isNotServicePreset,\n  renderOptionDefault,\n} from './constants';\nimport type { FocusActionType } from './types';\nimport { useChipsSelect, type UseChipsSelectProps } from './useChipsSelect';\nimport styles from './ChipsSelect.module.css';\n\nconst stylesDropdownVerticalPlacement = {\n  top: styles['ChipsSelect--pop-up'],\n  bottom: styles['ChipsSelect--pop-down'],\n} as const;\n\nexport interface ChipsSelectProps<O extends ChipOption>\n  extends ChipsInputBaseProps<O>,\n    UseChipsSelectProps<O>,\n    Pick<FormFieldProps, 'status' | 'mode' | 'before'> {\n  placement?: 'top' | 'bottom';\n  /**\n   * Отрисовка Spinner вместо списка опций в выпадающем списке\n   */\n  fetching?: boolean;\n  /**\n   * Закрытие выпадающего списка после выбора элемента\n   */\n  closeAfterSelect?: boolean;\n  /**\n   * Ширина раскрывающегося списка зависит от контента\n   */\n  dropdownAutoWidth?: boolean;\n  /**\n   * Принудительно использовать портал.\n   */\n  forceDropdownPortal?: boolean;\n  /**\n   * Передача `data-testid`.\n   */\n  dropdownTestId?: string;\n  /**\n   * Иконка раскрывающегося списка\n   */\n  icon?: React.ReactNode;\n  /**\n   * Добавляет значение в список на событие `onBlur` (использовать вместе с `creatable`)\n   */\n  addOnBlur?: boolean;\n  /**\n   * Отключает максимальную высоту по умолчанию\n   */\n  noMaxHeight?: boolean;\n\n  renderOption?(props: CustomSelectOptionProps, option: O): React.ReactNode;\n  /**\n   * Событие срабатывающее перед onChange\n   */\n  onChangeStart?(event: React.MouseEvent | React.KeyboardEvent, option: O): void;\n}\n\n/**\n * @see https://vkcom.github.io/VKUI/#/ChipsSelect\n */\nexport const ChipsSelect = <Option extends ChipOption>({\n  // FormFieldProps\n  id: labelledbyId,\n  getRootRef,\n  className,\n  status = 'default',\n  icon: dropdownIconProp,\n  onChangeStart,\n\n  // CustomSelectDropdownProps\n  options: optionsProp,\n  placement: placementProp = 'bottom',\n  closeAfterSelect = true,\n  selectedBehavior = DEFAULT_SELECTED_BEHAVIOR,\n  emptyText = DEFAULT_EMPTY_TEXT,\n  creatable = false,\n  fetching = false,\n  dropdownAutoWidth,\n  forceDropdownPortal,\n  noMaxHeight = false,\n  filterFn = defaultFilterFn,\n  dropdownTestId,\n\n  // ChipsInputProps\n  getRef,\n  value: valueProp,\n  defaultValue,\n  inputValue: inputValueProp,\n  defaultInputValue,\n  disabled,\n  getOptionValue = getOptionValueDefault,\n  getOptionLabel = getOptionLabelDefault,\n  getNewOptionData = getNewOptionDataDefault,\n  renderChip = renderChipDefault,\n  renderOption = renderOptionDefault,\n  onChange,\n  onFocus,\n  onInputChange: onInputChangeProp,\n  onBlur,\n  onKeyDown,\n  ...restProps\n}: ChipsSelectProps<Option>) => {\n  const {\n    // Связано с ChipsInputProps\n    // option\n    value,\n    addOptionFromInput,\n    addOption,\n    removeOption,\n    // input\n    inputRef: inputRefHook,\n    inputValue,\n    clearInput,\n    onInputChange,\n\n    // Связано с CustomSelectDropdownProps\n    options,\n    opened,\n    setOpened,\n    focusedOption,\n    focusedOptionIndex,\n    setFocusedOption,\n    setFocusedOptionIndex,\n  } = useChipsSelect({\n    // option\n    value: valueProp,\n    defaultValue,\n    onChange,\n    getOptionValue,\n    getOptionLabel,\n    getNewOptionData,\n\n    // input\n    inputValue: inputValueProp,\n    defaultInputValue,\n    onInputChange: onInputChangeProp,\n\n    // dropdown\n    options: optionsProp,\n    emptyText,\n    creatable,\n    filterFn,\n    selectedBehavior,\n\n    // other\n    disabled,\n  });\n\n  // Связано с ChipsInputProps\n  const rootRef = useExternRef(getRootRef);\n  const inputRef = useExternRef(getRef, inputRefHook);\n\n  // Связано с CustomSelectDropdownProps\n  const [dropdownVerticalPlacement, setDropdownVerticalPlacement] = React.useState<\n    Extract<Placement, 'top' | 'bottom'> | undefined\n  >(placementProp);\n  const dropdownId = React.useId();\n  const dropdownCurrentItemId =\n    focusedOptionIndex !== null ? `${dropdownId}-${focusedOptionIndex}` : undefined;\n  const dropdownScrollBoxRef = React.useRef<HTMLDivElement>(null);\n\n  const handleFocus = (event: React.FocusEvent<HTMLInputElement>) => {\n    if (onFocus) {\n      onFocus(event);\n    }\n\n    setOpened(true);\n    setFocusedOptionIndex(null);\n  };\n\n  const handleBlur = (event: React.FocusEvent<HTMLInputElement>) => {\n    if (onBlur) {\n      onBlur(event);\n    }\n\n    // Не добавляем значение, если его нужно выбрать строго из списка\n    if (!event.defaultPrevented && !creatable) {\n      event.preventDefault();\n    }\n  };\n\n  const chipsSelectOptions = React.useRef<HTMLElement[]>([]).current;\n\n  const scrollToElement = (index: number, center = false) => {\n    const dropdown = dropdownScrollBoxRef.current;\n    const item = chipsSelectOptions[index];\n\n    if (!item || !dropdown) {\n      return;\n    }\n\n    const dropdownHeight = dropdown.offsetHeight;\n    const scrollTop = dropdown.scrollTop;\n    const itemTop = item.offsetTop;\n    const itemHeight = item.offsetHeight;\n\n    if (center) {\n      dropdown.scrollTop = itemTop - dropdownHeight / 2 + itemHeight / 2;\n    } else if (itemTop + itemHeight > dropdownHeight + scrollTop) {\n      dropdown.scrollTop = itemTop - dropdownHeight + itemHeight;\n    } else if (itemTop < scrollTop) {\n      dropdown.scrollTop = itemTop;\n    }\n  };\n\n  const focusOptionByIndex = (index: number, oldIndex: number | null) => {\n    const length = options.length;\n\n    if (index < 0) {\n      index = length - 1;\n    } else if (index >= length) {\n      index = 0;\n    }\n\n    if (index === oldIndex) {\n      return;\n    }\n\n    scrollToElement(index);\n    setFocusedOptionIndex(index);\n  };\n\n  const focusOption = (nextIndex: number | null, type: FocusActionType) => {\n    let index = nextIndex === null ? -1 : nextIndex;\n\n    if (type === FOCUS_ACTION_NEXT) {\n      index = index + 1;\n    } else if (type === FOCUS_ACTION_PREV) {\n      index = index - 1;\n    }\n\n    focusOptionByIndex(index, focusedOptionIndex);\n  };\n\n  const handleKeyDown = (event: React.KeyboardEvent<HTMLInputElement>) => {\n    if (onKeyDown) {\n      onKeyDown(event);\n    }\n\n    if (event.defaultPrevented) {\n      return;\n    }\n\n    switch (event.key) {\n      case Keys.ARROW_UP:\n      case Keys.ARROW_DOWN:\n        event.preventDefault();\n\n        if (!opened) {\n          setOpened(true);\n          setFocusedOptionIndex(0);\n        } else {\n          focusOption(\n            focusedOptionIndex,\n            event.key === Keys.ARROW_UP ? FOCUS_ACTION_PREV : FOCUS_ACTION_NEXT,\n          );\n        }\n        break;\n      case Keys.ENTER: {\n        if (!opened) {\n          break;\n        }\n        if (focusedOptionIndex != null) {\n          const foundOption = options[focusedOptionIndex];\n          if (foundOption && isNotServicePreset(foundOption)) {\n            event.preventDefault();\n\n            if (onChangeStart) {\n              onChangeStart(event, foundOption);\n            }\n\n            addOption(foundOption);\n            setFocusedOptionIndex(null);\n            clearInput();\n            if (closeAfterSelect) {\n              setOpened(false);\n            }\n\n            break;\n          }\n        }\n\n        if (!creatable) {\n          event.preventDefault();\n        }\n        break;\n      }\n      case Keys.ESCAPE:\n      case Keys.TAB:\n        if (opened) {\n          setOpened(false);\n        }\n    }\n  };\n\n  React.useEffect(() => {\n    if (focusedOptionIndex === null) {\n      setFocusedOption(null);\n    } else {\n      const foundFocusedOptionIndex = options[focusedOptionIndex];\n\n      if (foundFocusedOptionIndex && isNotServicePreset(foundFocusedOptionIndex)) {\n        setFocusedOption(foundFocusedOptionIndex);\n      }\n    }\n  }, [options, focusedOptionIndex, setFocusedOption]);\n\n  const onDropdownPlacementChange = React.useCallback((placement: Placement) => {\n    // console.log(placement);\n    if (placement.startsWith('top')) {\n      setDropdownVerticalPlacement('top');\n    } else if (placement.startsWith('bottom')) {\n      setDropdownVerticalPlacement('bottom');\n    }\n  }, []);\n\n  const onDropdownMouseLeave = React.useCallback(() => {\n    setFocusedOptionIndex(null);\n  }, [setFocusedOptionIndex]);\n\n  const handleClickOutside = React.useCallback(() => {\n    setOpened(false);\n  }, [setOpened]);\n\n  useGlobalOnClickOutside(\n    handleClickOutside,\n    opened ? rootRef : null,\n    opened ? dropdownScrollBoxRef : null,\n  );\n\n  return (\n    <>\n      <ChipsInputBase\n        {...restProps}\n        disabled={disabled}\n        // FormFieldProps\n        id={labelledbyId}\n        getRootRef={rootRef}\n        className={classNames(\n          styles['ChipsSelect'],\n          opened &&\n            dropdownVerticalPlacement &&\n            stylesDropdownVerticalPlacement[dropdownVerticalPlacement],\n          className,\n        )}\n        status={status}\n        after={dropdownIconProp || <DropdownIcon opened={opened} />}\n        // option\n        value={value}\n        onAddChipOption={addOptionFromInput}\n        onRemoveChipOption={removeOption}\n        renderChip={renderChip}\n        // input\n        getRef={inputRef}\n        inputValue={inputValue}\n        onInputChange={onInputChange}\n        onFocus={handleFocus}\n        onBlur={handleBlur}\n        onKeyDown={handleKeyDown}\n        // a11y\n        role=\"combobox\"\n        aria-expanded={opened}\n        aria-autocomplete=\"list\"\n        aria-controls={opened ? dropdownId : undefined}\n        aria-activedescendant={opened ? dropdownCurrentItemId : undefined}\n        aria-haspopup=\"listbox\"\n      />\n      {opened && (\n        <CustomSelectDropdown\n          data-testid={dropdownTestId}\n          targetRef={rootRef}\n          placement={placementProp}\n          scrollBoxRef={dropdownScrollBoxRef}\n          onPlacementChange={onDropdownPlacementChange}\n          onMouseLeave={onDropdownMouseLeave}\n          fetching={fetching}\n          autoWidth={dropdownAutoWidth}\n          forcePortal={forceDropdownPortal}\n          noMaxHeight={noMaxHeight}\n          // a11y\n          id={dropdownId}\n          role=\"listbox\"\n          aria-labelledby={labelledbyId}\n        >\n          {options.map((option, index) => {\n            const dropdownItemId = `${dropdownId}-${index}`;\n\n            if (isEmptyOptionPreset(option)) {\n              return (\n                <Footnote key=\"empty-text\" className={styles['ChipsSelect__empty']}>\n                  {option.placeholder}\n                </Footnote>\n              );\n            }\n            if (isCreateNewOptionPreset(option)) {\n              return (\n                <CustomSelectOption\n                  key=\"create-new-option\"\n                  id={dropdownItemId}\n                  hovered={focusedOptionIndex === index}\n                  onMouseDown={() => addOptionFromInput(inputValue)}\n                  onMouseEnter={() => setFocusedOptionIndex(index)}\n                >\n                  {option.actionText}\n                </CustomSelectOption>\n              );\n            }\n            return (\n              <React.Fragment key={`${typeof option.value}-${option.label}`}>\n                {renderOption(\n                  {\n                    id: dropdownItemId,\n                    hovered: focusedOption\n                      ? getOptionValue(option) === getOptionValue(focusedOption)\n                      : false,\n                    children: option.label,\n                    selected: !!value.find(\n                      (selectedOption: Option) =>\n                        getOptionValue(selectedOption) === getOptionValue(option),\n                    ),\n                    getRootRef(node) {\n                      if (node) {\n                        chipsSelectOptions[index] = node;\n                      }\n                    },\n                    onMouseDown(event: React.MouseEvent<HTMLDivElement>) {\n                      if (onChangeStart) {\n                        onChangeStart(event, option);\n                      }\n\n                      if (!event.defaultPrevented) {\n                        closeAfterSelect && setOpened(false);\n                        addOption(option);\n                        clearInput();\n                      }\n                    },\n                    onMouseEnter() {\n                      setFocusedOptionIndex(index);\n                    },\n                  },\n                  option,\n                )}\n              </React.Fragment>\n            );\n          })}\n        </CustomSelectDropdown>\n      )}\n    </>\n  );\n};\n"],"names":["ChipsSelect","stylesDropdownVerticalPlacement","top","bottom","id","labelledbyId","getRootRef","className","status","icon","dropdownIconProp","onChangeStart","options","optionsProp","placement","placementProp","closeAfterSelect","selectedBehavior","DEFAULT_SELECTED_BEHAVIOR","emptyText","DEFAULT_EMPTY_TEXT","creatable","fetching","dropdownAutoWidth","forceDropdownPortal","noMaxHeight","filterFn","defaultFilterFn","dropdownTestId","getRef","value","valueProp","defaultValue","inputValue","inputValueProp","defaultInputValue","disabled","getOptionValue","getOptionValueDefault","getOptionLabel","getOptionLabelDefault","getNewOptionData","getNewOptionDataDefault","renderChip","renderChipDefault","renderOption","renderOptionDefault","onChange","onFocus","onInputChange","onInputChangeProp","onBlur","onKeyDown","restProps","addOptionFromInput","addOption","removeOption","inputRef","inputRefHook","clearInput","opened","setOpened","focusedOption","focusedOptionIndex","setFocusedOption","setFocusedOptionIndex","useChipsSelect","rootRef","useExternRef","dropdownVerticalPlacement","setDropdownVerticalPlacement","React","useState","dropdownId","useId","dropdownCurrentItemId","undefined","dropdownScrollBoxRef","useRef","handleFocus","event","handleBlur","defaultPrevented","preventDefault","chipsSelectOptions","current","scrollToElement","index","center","dropdown","item","dropdownHeight","offsetHeight","scrollTop","itemTop","offsetTop","itemHeight","focusOptionByIndex","oldIndex","length","focusOption","nextIndex","type","FOCUS_ACTION_NEXT","FOCUS_ACTION_PREV","handleKeyDown","key","Keys","ARROW_UP","ARROW_DOWN","ENTER","foundOption","isNotServicePreset","ESCAPE","TAB","useEffect","foundFocusedOptionIndex","onDropdownPlacementChange","useCallback","startsWith","onDropdownMouseLeave","handleClickOutside","useGlobalOnClickOutside","ChipsInputBase","classNames","after","DropdownIcon","onAddChipOption","onRemoveChipOption","role","aria-expanded","aria-autocomplete","aria-controls","aria-activedescendant","aria-haspopup","CustomSelectDropdown","data-testid","targetRef","scrollBoxRef","onPlacementChange","onMouseLeave","autoWidth","forcePortal","aria-labelledby","map","option","dropdownItemId","isEmptyOptionPreset","Footnote","placeholder","isCreateNewOptionPreset","CustomSelectOption","hovered","onMouseDown","onMouseEnter","actionText","Fragment","label","children","selected","find","selectedOption","node"],"mappings":"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"}