{"version":3,"sources":["../../../../src/components/PullToRefresh/PullToRefresh.tsx"],"sourcesContent":["import * as React from 'react';\nimport { classNames } from '@vkontakte/vkjs';\nimport { clamp } from '../../helpers/math';\nimport { useGlobalEventListener } from '../../hooks/useGlobalEventListener';\nimport { usePlatform } from '../../hooks/usePlatform';\nimport { usePrevious } from '../../hooks/usePrevious';\nimport { useTimeout } from '../../hooks/useTimeout';\nimport { DOMProps, useDOM } from '../../lib/dom';\nimport { coordY, VKUITouchEvent } from '../../lib/touch';\nimport { useIsomorphicLayoutEffect } from '../../lib/useIsomorphicLayoutEffect';\nimport { AnyFunction, HasChildren } from '../../types';\nimport { ScrollContextInterface, useScroll } from '../AppRoot/ScrollContext';\nimport { FixedLayout } from '../FixedLayout/FixedLayout';\nimport { Touch, TouchEvent, TouchProps } from '../Touch/Touch';\nimport TouchRootContext from '../Touch/TouchContext';\nimport { PullToRefreshSpinner } from './PullToRefreshSpinner';\nimport styles from './PullToRefresh.module.css';\n\nfunction cancelEvent(event: any) {\n  if (!event) {\n    return false;\n  }\n  while (event.originalEvent) {\n    event = event.originalEvent;\n  }\n  if (event.preventDefault && event.cancelable) {\n    event.preventDefault();\n  }\n  if (event.stopPropagation) {\n    event.stopPropagation();\n  }\n  return false;\n}\n\nexport interface PullToRefreshProps extends DOMProps, TouchProps, HasChildren {\n  /**\n   * Будет вызвана для обновления контента (прим.: функция должна быть мемоизированным коллбэком)\n   */\n  onRefresh: AnyFunction;\n  /**\n   * Определяет, выполняется ли обновление. Для скрытия спиннера после получения контента необходимо передать `false`\n   */\n  isFetching?: boolean;\n  /** @ignore */\n  scroll?: ScrollContextInterface;\n}\n\nconst TOUCH_MOVE_EVENT_PARAMS = {\n  cancelable: true,\n  passive: false,\n};\n\n/**\n * @see https://vkcom.github.io/VKUI/#/PullToRefresh\n */\nexport const PullToRefresh = ({\n  children,\n  isFetching,\n  onRefresh,\n  className,\n  ...restProps\n}: PullToRefreshProps) => {\n  const platform = usePlatform();\n  const scroll = useScroll();\n  const { document } = useDOM();\n  const prevIsFetching = usePrevious(isFetching);\n\n  const initParams = React.useMemo(\n    () => ({\n      start: platform === 'ios' ? -10 : -45,\n      max: platform === 'ios' ? 50 : 80,\n      maxY: platform === 'ios' ? 400 : 80,\n      refreshing: platform === 'ios' ? 36 : 50,\n      positionMultiplier: platform === 'ios' ? 0.21 : 1,\n    }),\n    [platform],\n  );\n\n  const [spinnerY, setSpinnerY] = React.useState(initParams.start);\n  const [watching, setWatching] = React.useState(false);\n  const [refreshing, setRefreshing] = React.useState(false);\n  const [canRefresh, setCanRefresh] = React.useState(false);\n  const [touchDown, setTouchDown] = React.useState(false);\n  const prevTouchDown = usePrevious(touchDown);\n\n  const touchY = React.useRef(0);\n  const [contentShift, setContentShift] = React.useState(0);\n  const [spinnerProgress, setSpinnerProgress] = React.useState(0);\n\n  const resetRefreshingState = React.useCallback(() => {\n    setWatching(false);\n    setCanRefresh(false);\n    setRefreshing(false);\n    setSpinnerY(initParams.start);\n    setSpinnerProgress(0);\n    setContentShift(0);\n  }, [initParams]);\n\n  const onRefreshingFinish = React.useCallback(() => {\n    if (!touchDown) {\n      resetRefreshingState();\n    }\n  }, [touchDown, resetRefreshingState]);\n\n  const { set: setWaitFetchingTimeout, clear: clearWaitFetchingTimeout } = useTimeout(\n    onRefreshingFinish,\n    1000,\n  );\n\n  useIsomorphicLayoutEffect(() => {\n    if (prevIsFetching !== undefined && prevIsFetching && !isFetching) {\n      onRefreshingFinish();\n    }\n  }, [prevIsFetching, isFetching, onRefreshingFinish]);\n\n  useIsomorphicLayoutEffect(() => {\n    if (prevIsFetching !== undefined && !prevIsFetching && isFetching) {\n      clearWaitFetchingTimeout();\n    }\n  }, [isFetching, prevIsFetching, clearWaitFetchingTimeout]);\n\n  const runRefreshing = React.useCallback(() => {\n    if (!refreshing && onRefresh) {\n      // cleanup if the consumer does not start fetching in 1s\n      setWaitFetchingTimeout();\n\n      setRefreshing(true);\n      setSpinnerY((prevSpinnerY) => (platform === 'ios' ? prevSpinnerY : initParams.refreshing));\n\n      onRefresh();\n    }\n  }, [refreshing, onRefresh, setWaitFetchingTimeout, platform, initParams.refreshing]);\n\n  useIsomorphicLayoutEffect(() => {\n    if (prevTouchDown !== undefined && prevTouchDown && !touchDown) {\n      if (!refreshing && canRefresh) {\n        runRefreshing();\n      } else if (refreshing && !isFetching) {\n        // only iOS can start refresh before gesture end\n        resetRefreshingState();\n      } else {\n        // refreshing && isFetching: refresh in progress\n        // OR !refreshing && !canRefresh: pull was not strong enough\n        setSpinnerY(refreshing ? initParams.refreshing : initParams.start);\n        setSpinnerProgress(0);\n        setContentShift(0);\n      }\n    }\n  }, [\n    initParams,\n    prevIsFetching,\n    isFetching,\n    onRefreshingFinish,\n    prevTouchDown,\n    touchDown,\n    refreshing,\n    canRefresh,\n    runRefreshing,\n  ]);\n\n  const startYRef = React.useRef(0);\n\n  const onTouchStart = (e: TouchEvent) => {\n    if (refreshing) {\n      cancelEvent(e);\n    }\n    setTouchDown(true);\n    startYRef.current = e.startY;\n\n    if (document) {\n      // eslint-disable-next-line no-restricted-properties\n      document.documentElement.classList.add('vkui--disable-overscroll-behavior');\n    }\n  };\n\n  const shouldPreventTouchMove = (event: VKUITouchEvent) => {\n    if (watching || refreshing) {\n      return true;\n    }\n\n    /* Нам нужно запретить touchmove у документа как только стало понятно, что\n     * начинается pull.\n     * состояния watching и refreshing устанавливаются слишком поздно и браузер\n     * может успеть начать нативный pull to refresh.\n     *\n     * Этот код является запасным вариантом, на случай, если css свойство\n     * overscroll-behavior не поддерживается\n     * */\n    const shiftY = coordY(event) - startYRef.current;\n    const pageYOffset = scroll?.getScroll().y;\n    const isRefreshGestureStarted = pageYOffset === 0 && shiftY > 0 && touchDown;\n    return isRefreshGestureStarted;\n  };\n\n  const onWindowTouchMove = (event: VKUITouchEvent) => {\n    if (shouldPreventTouchMove(event)) {\n      event.preventDefault();\n      event.stopPropagation();\n    }\n  };\n\n  useGlobalEventListener(document, 'touchmove', onWindowTouchMove, TOUCH_MOVE_EVENT_PARAMS);\n\n  const onTouchMove = (e: TouchEvent) => {\n    const { isY, shiftY } = e;\n    const { start, max } = initParams;\n    const pageYOffset = scroll?.getScroll().y;\n\n    if (watching && touchDown) {\n      cancelEvent(e);\n\n      const { positionMultiplier, maxY } = initParams;\n\n      const shift = Math.max(0, shiftY - touchY.current);\n\n      const currentY = clamp(start + shift * positionMultiplier, start, maxY);\n      const progress = currentY > -10 ? Math.abs((currentY + 10) / max) * 80 : 0;\n\n      setSpinnerY(currentY);\n      setSpinnerProgress(clamp(progress, 0, 80));\n      setCanRefresh(progress > 80);\n      setContentShift((currentY + 10) * 2.3);\n\n      if (progress > 85 && !refreshing && platform === 'ios') {\n        runRefreshing();\n      }\n    } else if (isY && pageYOffset === 0 && shiftY > 0 && !refreshing && touchDown) {\n      cancelEvent(e);\n\n      touchY.current = shiftY;\n      setWatching(true);\n      setSpinnerY(start);\n      setSpinnerProgress(0);\n    }\n  };\n\n  const onTouchEnd = () => {\n    setWatching(false);\n    setTouchDown(false);\n\n    // восстанавливаем overscroll behavior\n    if (document) {\n      // eslint-disable-next-line no-restricted-properties\n      document.documentElement.classList.remove('vkui--disable-overscroll-behavior');\n    }\n  };\n\n  const spinnerTransform = `translate3d(0, ${spinnerY}px, 0)`;\n  let contentTransform = '';\n\n  if (platform === 'ios' && refreshing && !touchDown) {\n    contentTransform = 'translate3d(0, 100px, 0)';\n  } else if (platform === 'ios' && (contentShift || refreshing)) {\n    contentTransform = `translate3d(0, ${contentShift}px, 0)`;\n  }\n\n  return (\n    <TouchRootContext.Provider value={true}>\n      <Touch\n        aria-live=\"polite\"\n        aria-busy={!!isFetching}\n        {...restProps}\n        onStart={onTouchStart}\n        onMove={onTouchMove}\n        onEnd={onTouchEnd}\n        className={classNames(\n          styles['PullToRefresh'],\n          platform === 'ios' && styles['PullToRefresh--ios'],\n          watching && styles['PullToRefresh--watching'],\n          refreshing && styles['PullToRefresh--refreshing'],\n          className,\n        )}\n      >\n        <FixedLayout className={styles['PullToRefresh__controls']} useParentWidth>\n          <PullToRefreshSpinner\n            style={{\n              transform: spinnerTransform,\n              WebkitTransform: spinnerTransform,\n              opacity: watching || refreshing || canRefresh ? 1 : 0,\n            }}\n            on={refreshing}\n            progress={refreshing ? undefined : spinnerProgress}\n          />\n        </FixedLayout>\n\n        <div\n          className={styles['PullToRefresh__content']}\n          style={{\n            transform: contentTransform,\n            WebkitTransform: contentTransform,\n          }}\n        >\n          {children}\n        </div>\n      </Touch>\n    </TouchRootContext.Provider>\n  );\n};\n"],"names":["PullToRefresh","cancelEvent","event","originalEvent","preventDefault","cancelable","stopPropagation","TOUCH_MOVE_EVENT_PARAMS","passive","children","isFetching","onRefresh","className","restProps","platform","usePlatform","scroll","useScroll","document","useDOM","prevIsFetching","usePrevious","initParams","React","useMemo","start","max","maxY","refreshing","positionMultiplier","spinnerY","setSpinnerY","useState","watching","setWatching","setRefreshing","canRefresh","setCanRefresh","touchDown","setTouchDown","prevTouchDown","touchY","useRef","contentShift","setContentShift","spinnerProgress","setSpinnerProgress","resetRefreshingState","useCallback","onRefreshingFinish","set","setWaitFetchingTimeout","clear","clearWaitFetchingTimeout","useTimeout","useIsomorphicLayoutEffect","undefined","runRefreshing","prevSpinnerY","startYRef","onTouchStart","e","current","startY","documentElement","classList","add","shouldPreventTouchMove","shiftY","coordY","pageYOffset","getScroll","y","isRefreshGestureStarted","onWindowTouchMove","useGlobalEventListener","onTouchMove","isY","shift","Math","currentY","clamp","progress","abs","onTouchEnd","remove","spinnerTransform","contentTransform","TouchRootContext","Provider","value","Touch","aria-live","aria-busy","onStart","onMove","onEnd","classNames","FixedLayout","useParentWidth","PullToRefreshSpinner","style","transform","WebkitTransform","opacity","on","div"],"mappings":"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"}